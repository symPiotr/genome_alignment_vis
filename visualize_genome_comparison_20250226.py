#! /usr/bin/env python3

import sys, re, subprocess

if len(sys.argv) != 5:
	sys.exit('This script inputs two fasta files (reference and query), plus an output file generated by "process_gff_20250226.py".\n'
	         'It outputs a file with info for visualization using Processing.\n'
	         'Usage: visualize_genome_comparizon_20250226.py <reference_fasta> <query_fasta> <processed_query_gff_file> <output_file_name>\n\n'
	         'For now, make sure to run the script while in the folder with the input files!')

Script, Reference_fasta, Query_fasta, Gene_list, Output_file = sys.argv


Work_dir = str(subprocess.check_output("pwd", shell=True))[2:-3] + "/"

subprocess.Popen("makeblastdb -in %s -dbtype nucl" % Reference_fasta, shell=True).wait()
subprocess.Popen("makeblastdb -in %s -dbtype nucl" % Query_fasta, shell=True).wait()
subprocess.Popen("tblastx -db_gencode 1 -query_gencode 4 -db %s -query %s -outfmt '6 qseqid qlen sseqid slen length pident qstart qend sstart send evalue' -evalue 10e-5 -out %s/blastn.txt" %  (Reference_fasta, Query_fasta, Work_dir), shell=True).wait()


#### processing BLAST output
BLAST = open("%s/blastn.txt" % Work_dir, "r")

Genome_details = []
Genome_list = []
Current_genome = ""

for line in BLAST:
    #       qseqid qlen sseqid slen length pident qstart qend sstart send evalue
    #e.g.,  SMDICPAN5	142648	SMDICMUL	142701	1184	99.662	63541	67092	63587	67138	0.0
    Line = line.strip().split()
    
    ### Ensuring that in Genome_details table, there is an entry for every genome, and then for every base: [['SMDICPAN. 142648, [[1, 'NA', 'NA', 'NA', 'NA', 'NA'], ...]  
    if Line[0] != Current_genome:
        Current_genome = Line[0]
        Genome_length = int(Line[1])
        Genome_list.append(Current_genome)
        
        positions = [""]
        for base_no in range(1, Genome_length):
            positions.append([base_no, "NA", "NA", "NA", "NA"]) # base_q, base_r, orientation, gene, gene_category
        
        Genome_details.append([Current_genome, Genome_length, positions])
    
    ### Now, record starting and ending positions of query and reference ...
    qstart = int(Line[6])
    qend = int(Line[7])
    sstart = int(Line[8])
    send = int(Line[9])
    
    qlen = abs(qend - qstart)
    slen = send - sstart
    qorient = "+"
    if send - sstart < 0:
        qorient = "+"
    
    ### Now, updating information on homologs of respective positions within Genome_details table ...
    for base_q in range(qstart, qend):
        if Genome_details[-1][2][base_q][1] == "NA":
            base_r = sstart + slen/qlen*(base_q-qstart)
            Genome_details[-1][2][base_q][1] = base_r
            Genome_details[-1][2][base_q][2] = qorient
BLAST.close()
####


#### Now, opening the PRO file with genes-in-Reference information , and adding gene info to Genome_details ...
GENES = open(Gene_list, "r")

Current_genome_no = "NA"
for line in GENES:
    Line = line.strip().split(",")
    if Line[0] == "genome_entry":   ### the first line for a genome should be:    genome_entry,SMDICMUL,142701,
        if Line[1] not in Genome_list:
            Current_genome_no = "NA"
        
        else:
            Current_genome_no = Genome_list.index(Line[1])
    else:                           ### example line: SMDICMUL,tyrS,Genetic_information_processing,87412,88668,-,
        if Current_genome_no != "NA":
            for i in range(int(Line[3]), int(Line[4])):
                Genome_details[Current_genome_no][2][i][3] = Line[1] ### gene
                Genome_details[Current_genome_no][2][i][4] = Line[2] ### gene_category
GENES.close()          


#print(Genome_details)        


VIS_DATA = open(Work_dir + Output_file, "w")
for genome in Genome_details:
    print("genome_entry", genome[0], genome[1], sep = ",", file = VIS_DATA)
    for base in range(1, genome[1], 30):
        print(genome[0], genome[2][base][0], genome[2][base][1], genome[2][base][2], genome[2][base][3], genome[2][base][4], sep = ",", file = VIS_DATA)
        
VIS_DATA.close()
print("All OK :)")

